# Impalib GitHub Action (CI Pipeline)
# Version: 1.0.0

name: Impalib CI

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  build:
    name: Build Job
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: 
        python-version: '3.9'
    - name: Build Python (CPP) Wrapper
      run: |
            python3 -m pip install --user . -v
            echo "Project built successfully."
  
  lint:
    name: Lint Job
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: 
        python-version: '3.9'
    - name: Lint Python Code
      run: |
            pip install ruff
            ruff check
  
  tsp-demo-job:
    name: Tsp Job
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: 
        python-version: '3.9'
    - uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        activate-environment: impalib
        python-version: '3.9'
    - name: CPP Header-Only Code
      shell: bash -el {0}
      run: |
            conda activate impalib
            python3 -m pip install --user .
            cd examples/Tsp
            cmake -B build && cmake --build build && cd build && ./demo
    - name: Pure Python Code
      shell: bash -el {0}
      run: |
            conda activate impalib
            cd test/python_tsp/src
            python3 main_tsp.py --nNodes=10 --filteringFlag=True --alpha=0.5 --augmFlag=True --threshold=-0.0001 --nITER=200 --randomTestFlag=True
    - name: Python (CPP) Wrapper Code
      shell: bash -el {0}
      run: |
            conda activate impalib
            cd src/impa
            python3 main_tsp.py --filteringFlag=True --alpha=0.5 --augmFlag=True --threshold=-0.0001 --nITER=200 --inputPath=inputs_1000_nNodes_random --testFile=0 --lkhSolFlag=True --maxAugmCount=10
            python3 main_tsp.py --nNodes=10 --filteringFlag=True --alpha=0.5 --augmFlag=True --threshold=-0.0001 --nITER=200 --randomTestFlag=True --lkhSolFlag=True --maxAugmCount=20
            
  ksat-demo-job: 
    name: Ksat Job
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: 
        python-version: '3.9'
    - uses : conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        activate-environment: impalib
        python-version: '3.9'
    - name: CPP Header-Only Code
      shell: bash -el {0}
      run: |
            conda activate impalib
            python3 -m pip install --user .
            cd examples/Ksat
            cmake -B build && cmake --build build && cd build && ./demo
    - name: Pure Python Code
      shell: bash -el {0}
      run: |
            conda activate impalib
            cd test/python_ksat/src
            python3 main_ksat.py --filteringFlag=True --threshold=-0.0001 --nITER=200 --alpha=0.5 --randomTestFlag=True --nConstraints=20 --nVariables=10 --kVariable=3
    - name: Python (CPP) Wrapper Code
      shell: bash -el {0}
      run: |
            conda activate impalib
            cd src/impa
            python3 main_ksat.py --filteringFlag=True --threshold=-0.0001 --nITER=200 --inputPath=inputs_ksat_zeromean_var_10_samples_500 --outputPath=outputs_ksat_zeromean_var_10_samples_500 --PPElements=2 --testFile=112 --alpha=0.5 --var=8 --typeMetrics=2 --overwrite=1 --PPFlag=True
            python3 main_ksat.py --filteringFlag=True --threshold=-0.0001 --nITER=200 --PPElements=2 --alpha=0.5 --var=8 --randomTestFlag=True --nConstraints=200 --nVariables=90 --kVariable=5 --PPFlag=True

  kcmwm-demo-job:
    name: Kcmwm Job
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: 
        python-version: '3.9'
    - uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        activate-environment: impalib
        python-version: '3.9'
    - name: CPP Header-Only Code
      shell: bash -el {0}
      run: |
            conda activate impalib
            python3 -m pip install --user .
            cd examples/KcMwm
            cmake -B build && cmake --build build && cd build && ./demo
            conda deactivate
    - name: Pure Python Code
      shell: bash -el {0}
      run: |
            conda activate impalib
            cd test/python_kc_mwm/src
            python3 main_pure_optimized.py --nITER=400 --filteringFlag=True --alpha=0.9 --PPFlag=True --threshold=-0.0001
    - name: Python (CPP) Wrapper Code
      shell: bash -el {0}
      run: |
            conda activate impalib
            cd src/impa
            python3 main_kc_mwm.py --nITER=400 --filteringFlag=True --alpha=0.9 --PPFlag=True --PPOption=1 --threshold=-0.0001
  
  ksat-test-job:
    name: Ksat Unit Test Job
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: 
        python-version: '3.9'
    - name: Run Ksat Unit Tests
      run: |
            python3 -m pip install --user .
            rm -rf build && cmake -B build && cmake --build build && cd build/test/src
            ./unit_test_ksat.sh
            grep -q "FAILED" ksat.txt && exit 1 || exit 0

  tsp-test-job:
    name: Tsp Unit Test Job
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: 
        python-version: '3.9'
    - name: Run Tsp Unit Tests
      run: |
            python3 -m pip install --user .
            rm -rf build && cmake -B build && cmake --build build && cd build/test/src
            ./unit_test_tsp.sh
            grep -q "FAILED" tsp.txt && exit 1 || exit 0

  kcmwm-test-job:
    name: Kcmwm Unit Test Job
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with: 
        python-version: '3.9'
    - name: Run Kcmwm Unit Tests
      run: |
            python3 -m pip install --user .
            rm -rf build && cmake -B build && cmake --build build && cd build/test/src
            ./unit_test_kc_mwm.sh
            grep -q "FAILED" kcmwm.txt && exit 1 || exit 0